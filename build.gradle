plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id 'scala'
    id "me.modmuss50.mod-publish-plugin" version "0.4.4"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }

    maven {
        url 'https://maven.wispforest.io'
    }

    maven {
        url "https://maven.enjarai.dev/releases"
    }

    maven {
        url "https://maven.enjarai.dev/mirrors"
    }

    maven {
        name = "Ladysnake Mods"
        url = 'https://maven.ladysnake.org/releases'
    }

    maven {
        name "Terraformers Maven"
        url 'https://maven.terraformersmc.com'
    }

    maven {
        url 'https://maven.shedaniel.me/'
    }

    maven {
        name "kotori316"
        url 'https://maven.kotori316.com/'
    }
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "libstellar" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${property('deps.minecraft')}"
    mappings "net.fabricmc:yarn:${property('deps.yarn')}:v2"
    modImplementation "net.fabricmc:fabric-loader:${property('deps.floader')}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric-api')}"
    modImplementation "com.kotori316:scalable-cats-force-fabric:${property('deps.scala')}"

    // owo
    annotationProcessor modApi("io.wispforest:owo-lib:${property('deps.owo-lib')}")
    include "io.wispforest:owo-sentinel:${property('deps.owo-lib')}"

    // CICADA
    modApi("nl.enjarai:cicada-lib:${property('deps.cicada')}")

    // CCA
    include modApi("org.ladysnake.cardinal-components-api:cardinal-components-base:${property('deps.cardinal-components-api')}")
    include modApi("org.ladysnake.cardinal-components-api:cardinal-components-entity:${property('deps.cardinal-components-api')}")
    include modApi("org.ladysnake.cardinal-components-api:cardinal-components-chunk:${property('deps.cardinal-components-api')}")
    include modApi("org.ladysnake.cardinal-components-api:cardinal-components-block:${property('deps.cardinal-components-api')}")
    include modApi("org.ladysnake.cardinal-components-api:cardinal-components-world:${property('deps.cardinal-components-api')}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

// configure the maven publication
publishing {
    repositories {
        maven {
            name = "enjaraiMaven"
            url = "https://maven.enjarai.dev/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = archivesBaseName
            version = version

            from components.java
        }
    }
}

publishMods {
    file = remapJar.archiveFile
    displayName = "libstellar ${property('mod_version')} for Minecraft ${property('deps.minecraft')}"
    version = project.version
    changelog = getRootProject().file("CHANGELOG.md").text
    type = STABLE
    modLoaders.add("fabric")

    def min = property('publish_target_min')
    def max = property('publish_target_max')

    if (providers.gradleProperty('modrinthToken').present) {
        modrinth {
            projectId = property('mod_modrinth')
            accessToken = providers.gradleProperty('modrinthToken').get()

            if (min == max) {
                minecraftVersions.add(min)
            } else {
                minecraftVersionRange {
                    start = min
                    end = max
                }
            }

            requires {
                slug = "owo-lib"
            }
            requires {
                slug = "cicada"
            }
            requires {
                slug = "scalable-cats-force"
            }
            requires {
                slug = "fabric-api"
            }
        }
    }

    if (providers.gradleProperty('githubToken').present) {
        github {
            repository = property('mod_github')
            accessToken = providers.gradleProperty('githubToken').get()

            commitish = property('git_branch')
            tagName = project.version
        }
    }
}

tasks.register('publishAll') {
    group 'publishing'
    dependsOn 'publish'
    dependsOn 'publishMods'
}
